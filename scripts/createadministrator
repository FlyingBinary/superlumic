#!/bin/bash
#    echo "(debug) starting ${0##*/}"

Password=ChangeM3.

if [ "${0##*/}" == "createadministratorq" ]; then quiet=true; else quiet=false; fi
#    echo "(debug) quiet=$quiet"

function printMessage {
    if ! "$quiet"; then
        out=$2
        if [ -z $out ]; then
            out=1
        fi
        if [ $out == 1 ]; then
            echo $1 >&1
        else
            echo $1 >&2
        fi
        return 0
    else
        return 1
    fi
}

function oneCommand {
    # oneCommand command failmessage exitcode
#    echo "(debug) command='$1'"
    `$1`
    status=$?
#    echo "(debug) status=[$status]"
    if [[ $status -gt 0 ]]; then
#        echo "(debug) exit with status [$2]"
        printMessage "FAILED: $2" 2
        exit $3
    fi
}

location=.
if [[ -f /usr/local/bin/createadministrator ]]; then
    location=/usr/local/bin
fi
if [[ -f ~/.superlumic/createadministrator ]]; then
    location=~/.superlumic
fi
#    echo "(debug) location=$location"

checkuserscript=checkuser
if [[ -f $location/checkuserq ]]; then
    checkuserscript=checkuserq
fi
#    echo "(debug) checkuserscript=$checkuserscript"

if [ -z $1 ]; then
    printMessage "Usage: ${0##*/} username uniqueid realname [picture]" 2
    exit 64
fi

if [[ ! -f $location/$checkuserscript ]]; then
   printMessage "Script '$location/$checkuserscript' not found"
   exit 65
fi

if [ -z $2 ] || [[ ! $2 =~ ^4[0-9][1-9]$ ]]; then
    printMessage "Please provide a unique user id in the range 401-499" 2
    exit 66
fi
#    echo "(debug) user id='$2'"

if [ -z "$3" ]; then
    printMessage "Please provide a real user name" 2
    exit 67
fi
#    echo "(debug) real user name='$3'"


if [ ! -z "$4" ]; then
    if [ ! -f "$4" ]; then
        printMessage "Please provide a valid picture file name, or omit this parameter" 2
        exit 68
    fi
fi
#    echo "(debug) picture file name='$4'"


#    echo "(debug) about to check if '$1' exists"
if "$location/$checkuserscript" exists $1; then
    printMessage "User '$1' already exists" 2
#    echo "(debug) about to check if '$1' is a member of the admin group"
    if "$location/$checkuserscript" member $1 admin; then
        printMessage "YES: User '$1' is a member of the admin group" 2
    else
        printMessage "NO: User '$1' is not a member of the admin group" 2
    fi
    exit 69
fi

#    echo "(debug) starting to create the user"
# Create the user
oneCommand "sudo dscl . -create /Users/$1 UniqueID $2" "Create unique id" 70
oneCommand "sudo dscl . -create /Users/$1 RealName \"$3\"" "Set real name" 71
if [ ! -z "$4" ]; then
    oneCommand "sudo dscl . -create /Users/$1 Picture \"$4\"" "Set user picture" 72
fi
oneCommand "sudo dscl . -passwd /Users/$1 $Password" "Set user password" 73
printMessage "User '$1' created with default password $Password"
printMessage "Change the password immediately"

# Set group membership
guid=$(sudo dscl . -read /Users/$1 GeneratedUID | cut -f 2 -d ' ')
oneCommand "sudo dscl . -create /Users/$1 PrimaryGroupID 20" "Set primary group" 74
oneCommand "sudo dscl . -append /Groups/admin GroupMembership $1" "Add to admin group membership" 75
oneCommand "sudo dscl . -append /Groups/admin GroupMembers $guid" "Add to admin group members" 76
printMessage "User '$1' added to staff and admin groups"

# Set up home directory and user shell
oneCommand "sudo mkdir /var/$1" "Create home directory" 77
oneCommand "sudo chown -R $1 /var/$1" "Set home directory ownership" 78
oneCommand "sudo dscl . -create /Users/$1 NFSHomeDirectory /var/$1" "Set home directory" 79
oneCommand "sudo dscl . -create /Users/$1 UserShell /bin/bash" "Set user shell" 80
printMessage "Home directory and user shell set for user '$1'"
printMessage "User '$1' setup completed"

exit 0
